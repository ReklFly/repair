package com.wtf.gateway.config;import com.netflix.zuul.ZuulFilter;import com.netflix.zuul.context.RequestContext;import com.netflix.zuul.exception.ZuulException;//import com.wtf.gateway.util.JwtUtil;import io.jsonwebtoken.Claims;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import javax.servlet.http.HttpServletRequest;/** * @author wangtengfei * @since 2020/3/17 10:00 */public class MyZuulFilter extends ZuulFilter {    private static final Logger log = LoggerFactory.getLogger(MyZuulFilter.class);//    @Autowired//    private JwtUtil jwtUtil;    //在请求前pre执行或者后post执行    @Override    public String filterType() {        return "pre";    }    //多个过滤器的执行顺序，数字越小，表示越先执行    @Override    public int filterOrder() {        return 0;    }    /**     * 判断该过滤器是否需要被执行，这里返回true，将会对所有请求生效     */    @Override    public boolean shouldFilter() {        return true;    }    //过滤器内执行的操作    //return任何Object的值都表示继续执行    //setSendZuulResponse(false)表示不再继续执行    @Override    public Object run() {//        System.out.println("经过后台过滤器");//        RequestContext currentContext = RequestContext.getCurrentContext();//        HttpServletRequest request = currentContext.getRequest();//        log.info("send {} request to {}",request.getMethod(),request.getRequestURL().toString());//        Object accessToken = request.getParameter("accessToken");//        if (accessToken==null) {//            log.warn("access token is empty");//            currentContext.setSendZuulResponse(false);//            currentContext.setResponseStatusCode(401);//            return null;////        }//        log.info("access token ok");        RequestContext currentContext = RequestContext.getCurrentContext();        HttpServletRequest request = currentContext.getRequest();        String header = request.getHeader("Authorization");        if (StringUtils.isNotBlank(header)) {            try {//                Claims claims = jwtUtil.getJWT(header);//                Integer role = (Integer) claims.get("role");                currentContext.addZuulRequestHeader("Authorization", header);                currentContext.setSendZuulResponse(true);                currentContext.setResponseStatusCode(HttpStatus.OK.value());            } catch (Exception e) {                log.error("sth");                currentContext.setSendZuulResponse(false);                currentContext.setResponseStatusCode(401);            }        }        return null;    }}