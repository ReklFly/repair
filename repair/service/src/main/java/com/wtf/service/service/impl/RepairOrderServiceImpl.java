package com.wtf.service.service.impl;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.wtf.service.constant.IceTypeEnum;import com.wtf.service.constant.RepairStatusEnum;import com.wtf.service.entity.po.*;import com.wtf.service.entity.vo.LogVO;import com.wtf.service.entity.vo.OrderVO;import com.wtf.service.entity.vo.RepairStatusVO;import com.wtf.service.entity.vo.StatusCountVO;import com.wtf.service.mapper.CustomerRepairOrderPOMapper;import com.wtf.service.mapper.RepairStatusMapper;import com.wtf.service.mapper.StatusLogMapper;import com.wtf.service.service.RepairOrderService;import com.wtf.service.user.IUserFeign;import com.wtf.service.util.JwtUtil;import com.wtf.service.util.ResponseEntity;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import javax.servlet.http.HttpServletRequest;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Comparator;import java.util.Date;import java.util.List;import java.util.stream.Collectors;/** * @author wangtengfei * @since 2020/3/23 14:59 */@Slf4j@Servicepublic class RepairOrderServiceImpl implements RepairOrderService {    @Autowired    private CustomerRepairOrderPOMapper orderMapper;    @Autowired    private RepairStatusMapper repairStatusMapper;    @Autowired    private IUserFeign userFeign;    @Autowired    private StatusLogMapper statusLogMapper;    @Autowired    private HttpServletRequest httpServletRequest;    @Autowired    private JwtUtil jwtUtil;    @Override    public String newRepairOrder(String account, String type, String problemDesc, String appointTime, String address,String phone) {        //新建维修单        String repairOrder = "WX" + new Date().getTime() + "T" + type;        CustomerRepairOrderPO order = new CustomerRepairOrderPO();        order.setAccount(account);        order.setAppointTime(appointTime);        order.setType(type);        order.setProblemDesc(problemDesc);        order.setRepairOrder(repairOrder);        order.setAddress(address);        order.setPhone(phone);        //新建维修单状态        RepairStatus repairStatus = new RepairStatus();        repairStatus.setRepairOrder(repairOrder);        //状态修改为已创建        repairStatus.setRepairStatus(RepairStatusEnum.create.getStatus());        repairStatusMapper.insertSelective(repairStatus);        StatusLog statusLog=new StatusLog();        statusLog.setRepairOrder(repairOrder);        statusLog.setStatus(RepairStatusEnum.create.getStatus());        statusLogMapper.insertSelective(statusLog);        return orderMapper.insertSelective(order) == 1 ? repairOrder : null;    }    //分派维修人员    @Override    public Integer assignServiceMan(String order, String account) {//        String token = (String) httpServletRequest.getAttribute("admin");//        if (StringUtils.isBlank(token)) {//            throw new RuntimeException("权限不足");//        }        RepairStatusExample example = new RepairStatusExample();        RepairStatus repairStatus = new RepairStatus();        repairStatus.setServicemanAccount(account);        //状态修改为已分派        repairStatus.setRepairStatus(RepairStatusEnum.assign.getStatus());        example.createCriteria().andRepairOrderEqualTo(order);        insertStatusLog(order, RepairStatusEnum.assign.getStatus());        return repairStatusMapper.updateByExampleSelective(repairStatus, example);    }    //维修后更新订单状态    @Override    public Integer updateStatus(RepairStatusVO repairStatusVO) {        if (repairStatusVO != null) {            RepairStatus repairStatus = new RepairStatus();            repairStatus.setRepairStatus(repairStatusVO.getRepairStatus());            repairStatus.setRepairDesc(repairStatusVO.getRepairDesc());            repairStatus.setRepairOrder(repairStatusVO.getRepairOrder());            repairStatus.setRepairDuration(repairStatusVO.getRepairDuration());            repairStatus.setUpdateBy(repairStatusVO.getUpdateBy());            RepairStatusExample example = new RepairStatusExample();            example.createCriteria().andRepairOrderEqualTo(repairStatus.getRepairOrder());            return repairStatusMapper.updateByExampleSelective(repairStatus, example);        }        return null;    }    @Override    public String signIn(String repairOrder,Integer status) {        RepairStatusExample example = new RepairStatusExample();        Date date = new Date();        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        sdf.format(date);        RepairStatus repairStatus = new RepairStatus();        repairStatus.setPresentTime(date);        repairStatus.setRepairStatus(status);        example.createCriteria().andRepairOrderEqualTo(repairOrder);        insertStatusLog(repairOrder, status);        return repairStatusMapper.updateByExampleSelective(repairStatus, example) == 1 ? sdf.format(date) : "签到失败";    }    @Override    public PageInfo<RepairStatus> getRepairStatus(String repairOrder, Integer pageNum, Integer pageSize) {        PageHelper.startPage(pageNum, pageSize);        RepairStatusExample example = new RepairStatusExample();        if (repairOrder != null) {            example.createCriteria().andRepairOrderLike("%" + repairOrder + "%");        }        List<RepairStatus> repairStatuses = repairStatusMapper.selectByExample(example);        repairStatuses.parallelStream().forEach(x -> {            x.setStatusName(RepairStatusEnum.getValueByCode(x.getRepairStatus()));            ResponseEntity<UserPO> result=userFeign.verifyAcc(x.getServicemanAccount());            UserPO userPO=result.getData();            x.setName(userPO.getSurname()+userPO.getName());            x.setPhone(userPO.getPhone());        });        PageInfo pageInfo = new PageInfo(repairStatuses);        return pageInfo;    }    @Override    public List<StatusCountVO> getStatusCount(Integer status) {        return repairStatusMapper.getStatusCount(status);    }    @Override    public PageInfo<OrderVO> getOrderByAccount(String account) {//        PageHelper.startPage(pageNum,pageSize);        List<OrderVO> orderVOS = repairStatusMapper.getOrderByAccount(account);        if(!CollectionUtils.isEmpty(orderVOS)){			orderVOS.forEach(x->{				x.setStatusValue(RepairStatusEnum.getValueByCode(x.getStatus()));			});		}        return new PageInfo<>(orderVOS);    }    @Override    public List<LogVO> getOrderLog(String order) {        List<LogVO> logVOS=new ArrayList<>();        List<Integer> list=statusLogMapper.getLog(order);        List<Integer> list1=new ArrayList<>();        for (int i = 1; i <= 6; i++) {            list1.add(i);        }        list1.removeAll(list);        list.forEach(x->{            LogVO logVO=statusLogMapper.getNewestLog(order,x);            logVO.setStatusValue(RepairStatusEnum.getValueByCode(x));            logVO.setFlag(1);            logVOS.add(logVO);        });        for (int i = 0; i <list1.size(); i++) {                LogVO logVO1=new LogVO();                logVO1.setStatus(list1.get(i));                logVO1.setFlag(0);                logVOS.add(logVO1);        }        List<LogVO> logVOList=logVOS.stream().sorted(Comparator.comparing(LogVO::getStatus)).collect(Collectors.toList());        return logVOList;    }    @Override    public PageInfo<OrderVO> getOrderByServiceMan(String account) {//        PageInfo<RepairStatus> pageInfo=new PageInfo<>();        List<OrderVO> orderVOS = repairStatusMapper.getOrderByServiceman(account);        if(!CollectionUtils.isEmpty(orderVOS)){            orderVOS.forEach(x->{                x.setStatusValue(RepairStatusEnum.getValueByCode(x.getStatus()));                x.setTypeName(IceTypeEnum.getValueByCode(x.getTypeE()));            });        }        return new PageInfo<>(orderVOS);    }    @Override    public String leave(String repairOrder, Integer status, String desc) throws ParseException {        signIn(repairOrder,status);        RepairStatusExample example = new RepairStatusExample();        RepairStatus repairStatus = new RepairStatus();//        repairStatus.setPresentTime(date);        repairStatus.setRepairDesc(desc);        repairStatus.setRepairDuration(getTimeLong(repairOrder,3,status));        example.createCriteria().andRepairOrderEqualTo(repairOrder);        repairStatusMapper.updateByExampleSelective(repairStatus, example);        return getTimeLong(repairOrder,3,status);    }    @Override    public PageInfo<OrderVO> getAllOrder() {        RepairStatusExample example=new RepairStatusExample();        example.createCriteria().andRepairStatusEqualTo(1);        List<RepairStatus> repairStatuses=repairStatusMapper.selectByExample(example);        List<OrderVO> orderVOS=new ArrayList<>();        repairStatuses.stream().sorted(Comparator.comparing(RepairStatus::getRepairStatus)).collect(Collectors.toList()).forEach(x->{            OrderVO orderVO=new OrderVO();            orderVO.setAccount(x.getServicemanAccount());            orderVO.setRepairOrder(x.getRepairOrder());            orderVO.setStatus(x.getRepairStatus());            orderVO.setCreateTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(x.getCreateTime()));            orderVO.setStatusValue(RepairStatusEnum.getValueByCode(x.getRepairStatus()));            orderVOS.add(orderVO);        });        return new PageInfo<>(orderVOS);    }    private void insertStatusLog(String repairOrder, Integer status) {        StatusLog statusLog = new StatusLog(repairOrder, status);        statusLogMapper.insertSelective(statusLog);    }    private String getTimeLong(String order,Integer s1,Integer s2) throws ParseException {        LogVO logVO1=statusLogMapper.getNewestLog(order,s1);        LogVO logVO2=statusLogMapper.getNewestLog(order,s2);        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        Long l1=sdf.parse(logVO1.getCreateTime()).getTime();        Long l2=sdf.parse(logVO2.getCreateTime()).getTime();        return s1>s1?(l1-l2)/60/1000+"分钟":(l2-l1)/60/1000+"分钟";    }}